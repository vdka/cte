
#library "libc" libc
#import "math/constants.cte"
#import "math/circle.cte"

#foreign libc {
    #discardable
    printf :: fn (fmt: string, args: #cvargs ..any) -> i32

    #discardable
    sprintf :: fn (buf: *u8, fmt: string, args: #cvargs ..any) -> i32
}

sum :: fn (a: $T, b: $U) -> T {

  total : T = a
  total = total + T(b)
  return total
}

this := sum(1, 2.5)
printf("total: %d\n", this)
that := sum(1, 5.5)
printf("total: %d\n", that)

min :: fn ($U: type, a: U, b: U) -> U {
  if a < b return a
  else return b
}

max :: fn (a: $T, b: T) -> T {
  if a > b return a
  else return b
}

add : fn (i64) -> i64 : fn (foo: i64) -> i64 {
    return foo + 1
}

sub :: fn (foo: i64) -> i64 {
    return foo - 1
}

forExample :: fn () -> void {

    for i := 0; i < 5; i += 1 {
        printf("%d\n", i)
    }

    return
}

a : f64 = 5.0
b : i64 = 3
c := min(f64, a, 4)
d := max(b, 4)
e := min(i64, b, d)
j := max(a, 4)

f := f64(b)

g : fn(i64) -> i64 = add

h := g(8)

g = sub

h = g(8)

i := circle.circumference(constants.tau)

// NOTE(vdka): The behaviour of being able to peer into an imported files imports
//  will go away
printf("Tau is %f\n", f32(circle.constants.tau))

forExample()
addrA := &a
valA := <addrA

swap :: fn (a: $T, b: T) -> T, T {
    return b, a
}

x, y := 1, 2

x, y = 3, 4

x, y = y, x

x, y = swap(x, y)

printf("%d, %d\n", x, y)

x1, y1 := swap(x, y)

printf("%d, %d\n", x1, y1)

Foo :: struct {
    a, b: f64
}

Bar :: struct {
    foo: Foo
}

k := 4.0

foo := Foo { b: k, a: 3.6 }

bar := Bar { Foo { 3.9, 4.3 } }

printf("%f, %f\n", foo.a, foo.b)
printf("%f, %f\n", bar.foo.a, bar.foo.b)

// NOTE: On the following 2 calls the kind value *must* be last due to what will otherwise be a misaligned stack pointer
printf("%s's type is %d bits wide and is of kind %d\n" , typeof(i64).name, typeof(i64).width, typeof(i64).kind)
printf("%s's type is %d bits wide and is of kind %d\n", typeof(string).name, typeof(string).width, typeof(string).kind)

