
extension AstNode {
{% for type in types.implementing.AstValue|!protocol %}

    {% if type.parentName|contains:"AstNode" %}
    var as{{ type.localName }}: Common{{ type.localName }} {
        get {
            return value as! Common{{ type.localName }}
        }
        set {
            self.value = newValue
        }
    }
    {% endif %}
    {% if type.parentName|contains:"AstNode" %}
    var asUnchecked{{ type.localName }}: {{ type.name }} {
        get {
            assert(kind == {{ type.name }}.astKind)
            return value as! {{ type.name }}
        }
        set {
            value = newValue
        }
    }
    {% endif %}
    {% if type.parentName|contains:"Checker" %}
    var asChecked{{ type.localName }}: {{ type.name }} {
        get {
            assert(kind == {{ type.name }}.astKind)
            return value as! {{ type.name }}
        }
        set {
            value = newValue
        }
    }
    {% endif %}
{% endfor %}
}

{% for type in types.implementing.AstValue|!protocol %}
{% if type.parentName|contains:"AstNode" %}

protocol Common{{ type.localName }}: AstValue {

    {% for var in type.instanceVariables %}
    var {{ var.name }}: {{ var.actualTypeName }} { get{% if var.isMutable %} set{% endif %} }
    {% endfor %}
}
{% endif %}
{% endfor %}

{% for type in types.implementing.AstValue|!protocol %}
{% if type.localName != "PolymorphicFunction" and type.localName != "Cast" and type.localName != "StructFieldAccess" and type.localName != "UnionFieldAccess" %}
extension {{ type.name }}: Common{{ type.localName }} {}
{% endif %}
{% endfor %}
extension Checker.Cast: CommonCall {}
extension Checker.PolymorphicFunction: CommonFunction {}
extension Checker.StructFieldAccess: CommonAccess {}
extension Checker.UnionFieldAccess: CommonAccess {}

extension Type {
{% for type in types.implementing.TypeValue %}

    var as{{ type.localName }}: Type.{{ type.localName|escapeReservedKeywords }} {
        return value as! Type.{{ type.localName|escapeReservedKeywords }}
    }
{% endfor %}
}
