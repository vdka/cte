
extension AstNode {
{% for type in types.implementing.AstNodeValue %}

    var as{% if type.parentName|contains:"Checker" %}Checked{% endif %}{{ type.localName }}: {{ type.name }} {
        get {
            assert(kind == {{ type.name }}.astKind)
            return value.baseAddress!.assumingMemoryBound(to: {{ type.name }}.self).pointee
        }
        set {
            kind = {{ type.name }}.astKind
            value.deallocate()
            value = UnsafeMutableRawBufferPointer.allocate(count: MemoryLayout<{{ type.name }}>.size)
            value.baseAddress!.assumingMemoryBound(to: {{ type.name }}.self).initialize(to: newValue)
        }
    }
{% endfor %}
}

extension Type {
{% for type in types.implementing.TypeValue %}

    var as{{ type.localName }}: Type.{{ type.localName }} {
        get {
            assert(kind == {{ type.localName }}.typeKind)
            return value.baseAddress!.assumingMemoryBound(to: {{ type.localName }}.self).pointee
        }
        set {
            kind = {{ type.localName }}.typeKind
            value.deallocate()
            value = UnsafeMutableRawBufferPointer.allocate(count: MemoryLayout<{{ type.localName }}>.size)
            value.baseAddress!.assumingMemoryBound(to: {{ type.localName }}.self).initialize(to: newValue)
        }
    }
{% endfor %}
}
