
extension AstValue {

    func copy() -> AstValue {
        switch self {
        {% for type in types.implementing.AstValue|!protocol %}

        {% if not type.storedVariables %}
        case is {{ type.name }}:
            return {{ type.name }}()
        {% else %}
        case let value as {{ type.name }}:
            return {{ type.name }}(
            {% for var in type.storedVariables %}
                {{ var.name }}: value.{% if var.isArray and var.name != "specializations" and var.name != "indices" %}{{ var.name }}.map({ $0.copy() }){% elif var.type.kind == "class" or var.type.name == "AstValue" %}{{ var.name }}{% if var.isOptional %}?{% endif %}.copy(){% else %}{{ var.name }}{% endif %}{% if not forloop.last %},{% endif %}
            {% empty %}
            {% endfor %}
        )
        {% endif %}
        {% endfor %}

        default:
            fatalError()
        }
    }
}

{% for type in types.classes where type.name != "SourceFile" and type.name != "Type" and type.name != "BuiltinFunction" and type.localName != "Context" and type.localName|!hasSuffix:"Tests"%}
extension {{ type.name }} {

    func copy() -> {{ type.name }} {
        return {{ type.name }}(
        {% for var in type.storedVariables %}
            {{ var.name }}: {% if var.type.kind == "class" or var.type.name == "AstValue" %}{{ var.name }}{% if var.isOptional %}?{% endif %}.copy(){% elif var.isArray and var.type.elementType.kind == "class" %}{{ var.name }}.map({ $0.copy() }){% else %}{{ var.name }}{% endif %}{% if not forloop.last %},{% endif %}
        {% endfor %}
        )
    }
}
{% endfor %}

extension Type {

    func copy() -> Type {
        // no need to copy Types
        return self
    }
}

extension SourceFile {

    func copy() -> SourceFile {
        // no need to copy SourceFiles
        return self
    }
}

extension BuiltinFunction {

    func copy() -> BuiltinFunction {
        // no need to copy BuiltinFunctions
        return self
    }
}

